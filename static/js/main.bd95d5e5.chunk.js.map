{"version":3,"sources":["logo.svg","Home.js","About.js","Projects.js","Blog.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","src","logo","alt","href","target","rel","About","Projects","Blog","Contact","App","to","render","location","TransitionGroup","CSSTransition","key","timeout","classNames","exact","path","component","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,yNCwB5BC,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,oCACA,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,qDACyB,0BAAMH,UAAU,MAAhB,YADzB,sCAIA,uBACEA,UAAU,WACVI,KAAK,oCACLC,OAAO,SACPC,IAAI,uBAJN,YCCSC,MAXf,WACE,OACE,yBAAKP,UAAU,OACb,qCACA,0CACc,0BAAMA,UAAU,MAAhB,SADd,YCOSQ,MAXf,WACE,OACE,yBAAKR,UAAU,OACb,wCACA,0CACc,0BAAMA,UAAU,MAAhB,YADd,YCOSS,MAXf,WACE,OACE,yBAAKT,UAAU,OACb,oCACA,0CACc,0BAAMA,UAAU,MAAhB,QADd,YCOSU,MAXf,WACE,OACE,yBAAKV,UAAU,OACb,uCACA,0CACc,0BAAMA,UAAU,MAAhB,WADd,YCyDSW,MApDf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKX,UAAU,UACb,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,4BACE,4BACE,kBAAC,IAAD,CAAMS,GAAG,IAAIZ,UAAU,cAAvB,SAIF,4BACE,kBAAC,IAAD,CAAMY,GAAG,SAASZ,UAAU,cAA5B,UAIF,4BACE,kBAAC,IAAD,CAAMY,GAAG,YAAYZ,UAAU,cAA/B,aAIF,4BACE,kBAAC,IAAD,CAAMY,GAAG,QAAQZ,UAAU,cAA3B,SAIF,4BACE,kBAAC,IAAD,CAAMY,GAAG,WAAWZ,UAAU,cAA9B,cAMN,kBAAC,IAAD,CACEa,OAAQ,gBAAGC,EAAH,EAAGA,SAAH,OACN,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAeC,IAAKH,EAASG,IAAKC,QAAS,IAAKC,WAAW,QACzD,kBAAC,IAAD,CAAQL,SAAUA,GAChB,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IACjC,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,SAASC,UAAWf,IACtC,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,YAAYC,UAAWd,IACzC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,QAAQC,UAAWb,IACrC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,WAAWC,UAAWZ,YCzCpCa,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASd,OAAO,kBAAC,EAAD,MAASe,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bd95d5e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.88d1d2ab.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\n\nfunction Home() {\n  return (\n    <div className=\"App\">\n      <h1>Home</h1>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <p>\n        A future webpage using <span className=\"hl\">React.js</span> as the\n        driving force to power it.\n      </p>\n      <a\n        className=\"App-link\"\n        href=\"https://github.com/emiliaguzik/SP\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Github\n      </a>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\n\nfunction About() {\n  return (\n    <div className=\"App\">\n      <h1>About</h1>\n      <p>\n        This is the <span className=\"hl\">about</span> page.\n      </p>\n    </div>\n  );\n}\n\nexport default About;\n","import React from \"react\";\n\nfunction Projects() {\n  return (\n    <div className=\"App\">\n      <h1>Projects</h1>\n      <p>\n        This is the <span className=\"hl\">projects</span> page.\n      </p>\n    </div>\n  );\n}\n\nexport default Projects;\n","import React from \"react\";\n\nfunction Blog() {\n  return (\n    <div className=\"App\">\n      <h1>Blog</h1>\n      <p>\n        This is the <span className=\"hl\">blog</span> page.\n      </p>\n    </div>\n  );\n}\n\nexport default Blog;\n","import React from \"react\";\n\nfunction Contact() {\n  return (\n    <div className=\"App\">\n      <h1>Contact</h1>\n      <p>\n        This is the <span className=\"hl\">contact</span> page.\n      </p>\n    </div>\n  );\n}\n\nexport default Contact;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport \"./App.css\";\nimport logo from \"./logo.svg\";\nimport Home from \"./Home\";\nimport About from \"./About\";\nimport Projects from \"./Projects\";\nimport Blog from \"./Blog\";\nimport Contact from \"./Contact\";\n\nfunction App() {\n  return (\n    <Router>\n      <nav className=\"navbar\">\n        <img src={logo} className=\"logo-nav\" alt=\"logo\" />\n        <ul>\n          <li>\n            <Link to=\"/\" className=\"react-link\">\n              Home\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/about\" className=\"react-link\">\n              About\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/projects\" className=\"react-link\">\n              Projects\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/blog\" className=\"react-link\">\n              Blog\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/contact\" className=\"react-link\">\n              Contact\n            </Link>\n          </li>\n        </ul>\n      </nav>\n      <Route\n        render={({ location }) => (\n          <TransitionGroup>\n            <CSSTransition key={location.key} timeout={450} classNames=\"fade\">\n              <Switch location={location}>\n                <Route exact path=\"/\" component={Home} />\n                <Route exact path=\"/about\" component={About} />\n                <Route exact path=\"/projects\" component={Projects} />\n                <Route exact path=\"/blog\" component={Blog} />\n                <Route exact path=\"/contact\" component={Contact} />\n              </Switch>\n            </CSSTransition>\n          </TransitionGroup>\n        )}\n      />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}